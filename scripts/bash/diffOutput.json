[
  {
    "blocks": [
      {
        "lines": [
          {
            "content": "+/**",
            "type": "insert",
            "newNumber": 1
          },
          {
            "content": "+ * @description 图形绘制",
            "type": "insert",
            "newNumber": 2
          },
          {
            "content": "+ * @author clyan",
            "type": "insert",
            "newNumber": 3
          },
          {
            "content": "+ */",
            "type": "insert",
            "newNumber": 4
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 5
          },
          {
            "content": "+import { useEffect, useRef, useState } from 'react'",
            "type": "insert",
            "newNumber": 6
          },
          {
            "content": "+import { createPortal } from 'react-dom'",
            "type": "insert",
            "newNumber": 7
          },
          {
            "content": "+import { Bezier } from 'bezier-js'",
            "type": "insert",
            "newNumber": 8
          },
          {
            "content": "+import { CurveDrawer } from './utils/curve-drawer'",
            "type": "insert",
            "newNumber": 9
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 10
          },
          {
            "content": "+export function KonvaPage() {",
            "type": "insert",
            "newNumber": 11
          },
          {
            "content": "+  const ref = useRef<HTMLCanvasElement | null>(null)",
            "type": "insert",
            "newNumber": 12
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 13
          },
          {
            "content": "+  const [curveDrawer, setCurveDrawer] = useState<CurveDrawer>()",
            "type": "insert",
            "newNumber": 14
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 15
          },
          {
            "content": "+  useEffect(() => {",
            "type": "insert",
            "newNumber": 16
          },
          {
            "content": "+    if (!ref.current) {",
            "type": "insert",
            "newNumber": 17
          },
          {
            "content": "+      console.warn('canvas element ins\\'t exit')",
            "type": "insert",
            "newNumber": 18
          },
          {
            "content": "+      return",
            "type": "insert",
            "newNumber": 19
          },
          {
            "content": "+    }",
            "type": "insert",
            "newNumber": 20
          },
          {
            "content": "+    const curveDrawer = new CurveDrawer({ canvasEle: ref.current })",
            "type": "insert",
            "newNumber": 21
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 22
          },
          {
            "content": "+    setCurveDrawer(curveDrawer)",
            "type": "insert",
            "newNumber": 23
          },
          {
            "content": "+  }, [])",
            "type": "insert",
            "newNumber": 24
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 25
          },
          {
            "content": "+  useEffect(() => {",
            "type": "insert",
            "newNumber": 26
          },
          {
            "content": "+    if (!curveDrawer) return",
            "type": "insert",
            "newNumber": 27
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 28
          },
          {
            "content": "+    const curve = new Bezier(150, 40, 80, 30, 105, 150)",
            "type": "insert",
            "newNumber": 29
          },
          {
            "content": "+    curveDrawer.drawSkeleton(curve)",
            "type": "insert",
            "newNumber": 30
          },
          {
            "content": "+    curveDrawer.drawCurve(curve)",
            "type": "insert",
            "newNumber": 31
          },
          {
            "content": "+    curveDrawer.setColor('red')",
            "type": "insert",
            "newNumber": 32
          },
          {
            "content": "+    curve.outlineshapes(25, 25).forEach((s) => {",
            "type": "insert",
            "newNumber": 33
          },
          {
            "content": "+      curveDrawer.setRandomFill(0.2)",
            "type": "insert",
            "newNumber": 34
          },
          {
            "content": "+      curveDrawer.drawShape(s)",
            "type": "insert",
            "newNumber": 35
          },
          {
            "content": "+    })",
            "type": "insert",
            "newNumber": 36
          },
          {
            "content": "+  }, [curveDrawer])",
            "type": "insert",
            "newNumber": 37
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 38
          },
          {
            "content": "+  return (",
            "type": "insert",
            "newNumber": 39
          },
          {
            "content": "+    <>",
            "type": "insert",
            "newNumber": 40
          },
          {
            "content": "+      {createPortal(",
            "type": "insert",
            "newNumber": 41
          },
          {
            "content": "+        <canvas className=\"absolute top-0 h-screen w-screen\" ref={ref} />,",
            "type": "insert",
            "newNumber": 42
          },
          {
            "content": "+        document.body,",
            "type": "insert",
            "newNumber": 43
          },
          {
            "content": "+      )}",
            "type": "insert",
            "newNumber": 44
          },
          {
            "content": "+    </>",
            "type": "insert",
            "newNumber": 45
          },
          {
            "content": "+  )",
            "type": "insert",
            "newNumber": 46
          },
          {
            "content": "+}",
            "type": "insert",
            "newNumber": 47
          }
        ],
        "oldStartLine": 0,
        "oldStartLine2": null,
        "newStartLine": 1,
        "header": "@@ -0,0 +1,47 @@"
      }
    ],
    "deletedLines": 0,
    "addedLines": 47,
    "isGitDiff": true,
    "newFileMode": "100644",
    "isNew": true,
    "checksumBefore": "0000000",
    "checksumAfter": "6610f1d",
    "oldName": "/dev/null",
    "language": "tsx",
    "newName": "src/pages/konva-page/index.tsx",
    "isCombined": false
  },
  {
    "blocks": [
      {
        "lines": [
          {
            "content": "+/**",
            "type": "insert",
            "newNumber": 1
          },
          {
            "content": "+ * @description 贝塞尔曲线运动",
            "type": "insert",
            "newNumber": 2
          },
          {
            "content": "+ * @author clyan",
            "type": "insert",
            "newNumber": 3
          },
          {
            "content": "+ */",
            "type": "insert",
            "newNumber": 4
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 5
          },
          {
            "content": "+import type { Bezier, Shape } from 'bezier-js'",
            "type": "insert",
            "newNumber": 6
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 7
          },
          {
            "content": "+import type { Tuple } from '@/model/type'",
            "type": "insert",
            "newNumber": 8
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 9
          },
          {
            "content": "+export interface Coordinate {",
            "type": "insert",
            "newNumber": 10
          },
          {
            "content": "+  /** x */",
            "type": "insert",
            "newNumber": 11
          },
          {
            "content": "+  x: number",
            "type": "insert",
            "newNumber": 12
          },
          {
            "content": "+  /** y */",
            "type": "insert",
            "newNumber": 13
          },
          {
            "content": "+  y: number",
            "type": "insert",
            "newNumber": 14
          },
          {
            "content": "+}",
            "type": "insert",
            "newNumber": 15
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 16
          },
          {
            "content": "+interface BezierCurveProps {",
            "type": "insert",
            "newNumber": 17
          },
          {
            "content": "+  /** canvas节点 */",
            "type": "insert",
            "newNumber": 18
          },
          {
            "content": "+  canvasEle: HTMLCanvasElement",
            "type": "insert",
            "newNumber": 19
          },
          {
            "content": "+}",
            "type": "insert",
            "newNumber": 20
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 21
          },
          {
            "content": "+export class CurveDrawer {",
            "type": "insert",
            "newNumber": 22
          },
          {
            "content": "+  /** canvas节点 */",
            "type": "insert",
            "newNumber": 23
          },
          {
            "content": "+  canvasEle: HTMLCanvasElement",
            "type": "insert",
            "newNumber": 24
          },
          {
            "content": "+  ctx: CanvasRenderingContext2D | null",
            "type": "insert",
            "newNumber": 25
          },
          {
            "content": "+  randomIndex = 0",
            "type": "insert",
            "newNumber": 26
          },
          {
            "content": "+  randomColors: string[] = []",
            "type": "insert",
            "newNumber": 27
          },
          {
            "content": "+  constructor({ canvasEle }: BezierCurveProps) {",
            "type": "insert",
            "newNumber": 28
          },
          {
            "content": "+    this.canvasEle = canvasEle",
            "type": "insert",
            "newNumber": 29
          },
          {
            "content": "+    this.ctx = canvasEle.getContext('2d')",
            "type": "insert",
            "newNumber": 30
          },
          {
            "content": "+    this.adaptDPR()",
            "type": "insert",
            "newNumber": 31
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 32
          },
          {
            "content": "+    for (let i = 0, j; i < 360; i++) {",
            "type": "insert",
            "newNumber": 33
          },
          {
            "content": "+      j = (i * 47) % 360",
            "type": "insert",
            "newNumber": 34
          },
          {
            "content": "+      this.randomColors.push(`hsl(${j},50%,50%)`)",
            "type": "insert",
            "newNumber": 35
          },
          {
            "content": "+    }",
            "type": "insert",
            "newNumber": 36
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 37
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 38
          },
          {
            "content": "+  adaptDPR() { // 在初始化 canvas 的时候就要调用该方法",
            "type": "insert",
            "newNumber": 39
          },
          {
            "content": "+    const dpr = window.devicePixelRatio",
            "type": "insert",
            "newNumber": 40
          },
          {
            "content": "+    const { height, width } = this.canvasEle.getBoundingClientRect()",
            "type": "insert",
            "newNumber": 41
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 42
          },
          {
            "content": "+    // 重新设置 canvas 自身宽高大小和 css 大小。放大 canvas；css 保持不变，因为我们需要那么多的点",
            "type": "insert",
            "newNumber": 43
          },
          {
            "content": "+    this.canvasEle.width = Math.round(width * dpr)",
            "type": "insert",
            "newNumber": 44
          },
          {
            "content": "+    this.canvasEle.height = Math.round(height * dpr)",
            "type": "insert",
            "newNumber": 45
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 46
          },
          {
            "content": "+    this.canvasEle.style.width = `${width}px`",
            "type": "insert",
            "newNumber": 47
          },
          {
            "content": "+    this.canvasEle.style.height = `${height}px`",
            "type": "insert",
            "newNumber": 48
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 49
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 50
          },
          {
            "content": "+  getCanvas() {",
            "type": "insert",
            "newNumber": 51
          },
          {
            "content": "+    return this.canvasEle",
            "type": "insert",
            "newNumber": 52
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 53
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 54
          },
          {
            "content": "+  setColor(c: string) {",
            "type": "insert",
            "newNumber": 55
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 56
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 57
          },
          {
            "content": "+    ctx.strokeStyle = c",
            "type": "insert",
            "newNumber": 58
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 59
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 60
          },
          {
            "content": "+  noColor() {",
            "type": "insert",
            "newNumber": 61
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 62
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 63
          },
          {
            "content": "+    ctx.strokeStyle = 'transparent'",
            "type": "insert",
            "newNumber": 64
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 65
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 66
          },
          {
            "content": "+  setRandomColor() {",
            "type": "insert",
            "newNumber": 67
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 68
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 69
          },
          {
            "content": "+    this.randomIndex = (this.randomIndex + 1) % this.randomColors.length",
            "type": "insert",
            "newNumber": 70
          },
          {
            "content": "+    const c = this.randomColors[this.randomIndex]",
            "type": "insert",
            "newNumber": 71
          },
          {
            "content": "+    ctx.strokeStyle = c",
            "type": "insert",
            "newNumber": 72
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 73
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 74
          },
          {
            "content": "+  setRandomFill(a: number) {",
            "type": "insert",
            "newNumber": 75
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 76
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 77
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 78
          },
          {
            "content": "+    this.randomIndex = (this.randomIndex + 1) % this.randomColors.length",
            "type": "insert",
            "newNumber": 79
          },
          {
            "content": "+    a = typeof a === 'undefined' ? 1 : a",
            "type": "insert",
            "newNumber": 80
          },
          {
            "content": "+    let c = this.randomColors[this.randomIndex]",
            "type": "insert",
            "newNumber": 81
          },
          {
            "content": "+    c = c.replace('hsl(', 'hsla(').replace(')', `,${a})`)",
            "type": "insert",
            "newNumber": 82
          },
          {
            "content": "+    ctx.fillStyle = c",
            "type": "insert",
            "newNumber": 83
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 84
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 85
          },
          {
            "content": "+  setFill(c: string) {",
            "type": "insert",
            "newNumber": 86
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 87
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 88
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 89
          },
          {
            "content": "+    ctx.fillStyle = c",
            "type": "insert",
            "newNumber": 90
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 91
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 92
          },
          {
            "content": "+  noFill() {",
            "type": "insert",
            "newNumber": 93
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 94
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 95
          },
          {
            "content": "+    ctx.fillStyle = 'transparent'",
            "type": "insert",
            "newNumber": 96
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 97
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 98
          },
          {
            "content": "+  drawSkeleton(curve: Bezier, offset?: Coordinate, noCoords?: boolean) {",
            "type": "insert",
            "newNumber": 99
          },
          {
            "content": "+    if (!this.ctx) return",
            "type": "insert",
            "newNumber": 100
          },
          {
            "content": "+    offset = offset || { x: 0, y: 0 }",
            "type": "insert",
            "newNumber": 101
          },
          {
            "content": "+    const pts = curve.points",
            "type": "insert",
            "newNumber": 102
          },
          {
            "content": "+    this.ctx.strokeStyle = 'lightgrey'",
            "type": "insert",
            "newNumber": 103
          },
          {
            "content": "+    this.drawLine(pts[0], pts[1], offset)",
            "type": "insert",
            "newNumber": 104
          },
          {
            "content": "+    if (pts.length === 3)",
            "type": "insert",
            "newNumber": 105
          },
          {
            "content": "+      this.drawLine(pts[1], pts[2], offset)",
            "type": "insert",
            "newNumber": 106
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 107
          },
          {
            "content": "+    else",
            "type": "insert",
            "newNumber": 108
          },
          {
            "content": "+      this.drawLine(pts[2], pts[3], offset)",
            "type": "insert",
            "newNumber": 109
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 110
          },
          {
            "content": "+    this.ctx.strokeStyle = 'black'",
            "type": "insert",
            "newNumber": 111
          },
          {
            "content": "+    if (!noCoords) this.drawPoints(pts, offset)",
            "type": "insert",
            "newNumber": 112
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 113
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 114
          },
          {
            "content": "+  // 绘制贝塞尔曲线",
            "type": "insert",
            "newNumber": 115
          },
          {
            "content": "+  drawCurve(curve: Bezier, offset?: Coordinate) {",
            "type": "insert",
            "newNumber": 116
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 117
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 118
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 119
          },
          {
            "content": "+    offset = offset || { x: 0, y: 0 }",
            "type": "insert",
            "newNumber": 120
          },
          {
            "content": "+    const ox = offset.x",
            "type": "insert",
            "newNumber": 121
          },
          {
            "content": "+    const oy = offset.y",
            "type": "insert",
            "newNumber": 122
          },
          {
            "content": "+    ctx.beginPath()",
            "type": "insert",
            "newNumber": 123
          },
          {
            "content": "+    const p = curve.points",
            "type": "insert",
            "newNumber": 124
          },
          {
            "content": "+    ctx.moveTo(p[0].x + ox, p[0].y + oy)",
            "type": "insert",
            "newNumber": 125
          },
          {
            "content": "+    if (p.length === 3)",
            "type": "insert",
            "newNumber": 126
          },
          {
            "content": "+      ctx.quadraticCurveTo(p[1].x + ox, p[1].y + oy, p[2].x + ox, p[2].y + oy)",
            "type": "insert",
            "newNumber": 127
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 128
          },
          {
            "content": "+    if (p.length === 4) {",
            "type": "insert",
            "newNumber": 129
          },
          {
            "content": "+      ctx.bezierCurveTo(",
            "type": "insert",
            "newNumber": 130
          },
          {
            "content": "+        p[1].x + ox,",
            "type": "insert",
            "newNumber": 131
          },
          {
            "content": "+        p[1].y + oy,",
            "type": "insert",
            "newNumber": 132
          },
          {
            "content": "+        p[2].x + ox,",
            "type": "insert",
            "newNumber": 133
          },
          {
            "content": "+        p[2].y + oy,",
            "type": "insert",
            "newNumber": 134
          },
          {
            "content": "+        p[3].x + ox,",
            "type": "insert",
            "newNumber": 135
          },
          {
            "content": "+        p[3].y + oy,",
            "type": "insert",
            "newNumber": 136
          },
          {
            "content": "+      )",
            "type": "insert",
            "newNumber": 137
          },
          {
            "content": "+    }",
            "type": "insert",
            "newNumber": 138
          },
          {
            "content": "+    ctx.stroke()",
            "type": "insert",
            "newNumber": 139
          },
          {
            "content": "+    ctx.closePath()",
            "type": "insert",
            "newNumber": 140
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 141
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 142
          },
          {
            "content": "+  drawLine(p1: Coordinate, p2: Coordinate, offset: Coordinate) {",
            "type": "insert",
            "newNumber": 143
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 144
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 145
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 146
          },
          {
            "content": "+    offset = offset || { x: 0, y: 0 }",
            "type": "insert",
            "newNumber": 147
          },
          {
            "content": "+    const ox = offset.x",
            "type": "insert",
            "newNumber": 148
          },
          {
            "content": "+    const oy = offset.y",
            "type": "insert",
            "newNumber": 149
          },
          {
            "content": "+    ctx.beginPath()",
            "type": "insert",
            "newNumber": 150
          },
          {
            "content": "+    ctx.moveTo(p1.x + ox, p1.y + oy)",
            "type": "insert",
            "newNumber": 151
          },
          {
            "content": "+    ctx.lineTo(p2.x + ox, p2.y + oy)",
            "type": "insert",
            "newNumber": 152
          },
          {
            "content": "+    ctx.stroke()",
            "type": "insert",
            "newNumber": 153
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 154
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 155
          },
          {
            "content": "+  drawPoint(p: Coordinate, offset: Coordinate) {",
            "type": "insert",
            "newNumber": 156
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 157
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 158
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 159
          },
          {
            "content": "+    offset = offset || { x: 0, y: 0 }",
            "type": "insert",
            "newNumber": 160
          },
          {
            "content": "+    const ox = offset.x",
            "type": "insert",
            "newNumber": 161
          },
          {
            "content": "+    const oy = offset.y",
            "type": "insert",
            "newNumber": 162
          },
          {
            "content": "+    ctx.beginPath()",
            "type": "insert",
            "newNumber": 163
          },
          {
            "content": "+    ctx.arc(p.x + ox, p.y + oy, 5, 0, 2 * Math.PI)",
            "type": "insert",
            "newNumber": 164
          },
          {
            "content": "+    ctx.stroke()",
            "type": "insert",
            "newNumber": 165
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 166
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 167
          },
          {
            "content": "+  drawPoints(points: Coordinate[], offset: Coordinate) {",
            "type": "insert",
            "newNumber": 168
          },
          {
            "content": "+    offset = offset || { x: 0, y: 0 }",
            "type": "insert",
            "newNumber": 169
          },
          {
            "content": "+    points.forEach(p => this.drawCircle(p, 3, offset))",
            "type": "insert",
            "newNumber": 170
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 171
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 172
          },
          {
            "content": "+  drawArc(p: Parameters<CanvasPath['arc']>, offset: Coordinate) {",
            "type": "insert",
            "newNumber": 173
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 174
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 175
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 176
          },
          {
            "content": "+    offset = offset || { x: 0, y: 0 }",
            "type": "insert",
            "newNumber": 177
          },
          {
            "content": "+    const ox = offset.x",
            "type": "insert",
            "newNumber": 178
          },
          {
            "content": "+    const oy = offset.y",
            "type": "insert",
            "newNumber": 179
          },
          {
            "content": "+    ctx.beginPath()",
            "type": "insert",
            "newNumber": 180
          },
          {
            "content": "+    ctx.moveTo(p[0] + ox, p[1] + oy)",
            "type": "insert",
            "newNumber": 181
          },
          {
            "content": "+    ctx.arc(...p)",
            "type": "insert",
            "newNumber": 182
          },
          {
            "content": "+    ctx.lineTo(p[0] + ox, p[1] + oy)",
            "type": "insert",
            "newNumber": 183
          },
          {
            "content": "+    ctx.fill()",
            "type": "insert",
            "newNumber": 184
          },
          {
            "content": "+    ctx.stroke()",
            "type": "insert",
            "newNumber": 185
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 186
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 187
          },
          {
            "content": "+  drawCircle(p: Coordinate, r: number, offset: Coordinate) {",
            "type": "insert",
            "newNumber": 188
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 189
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 190
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 191
          },
          {
            "content": "+    offset = offset || { x: 0, y: 0 }",
            "type": "insert",
            "newNumber": 192
          },
          {
            "content": "+    const ox = offset.x",
            "type": "insert",
            "newNumber": 193
          },
          {
            "content": "+    const oy = offset.y",
            "type": "insert",
            "newNumber": 194
          },
          {
            "content": "+    ctx.beginPath()",
            "type": "insert",
            "newNumber": 195
          },
          {
            "content": "+    ctx.arc(p.x + ox, p.y + oy, r, 0, 2 * Math.PI)",
            "type": "insert",
            "newNumber": 196
          },
          {
            "content": "+    ctx.stroke()",
            "type": "insert",
            "newNumber": 197
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 198
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 199
          },
          {
            "content": "+  drawHull(hull: Tuple<Coordinate, 6 | 8>) {",
            "type": "insert",
            "newNumber": 200
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 201
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 202
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 203
          },
          {
            "content": "+    ctx.beginPath()",
            "type": "insert",
            "newNumber": 204
          },
          {
            "content": "+    if (hull.length === 6) {",
            "type": "insert",
            "newNumber": 205
          },
          {
            "content": "+      ctx.moveTo(hull[0].x, hull[0].y)",
            "type": "insert",
            "newNumber": 206
          },
          {
            "content": "+      ctx.lineTo(hull[1].x, hull[1].y)",
            "type": "insert",
            "newNumber": 207
          },
          {
            "content": "+      ctx.lineTo(hull[2].x, hull[2].y)",
            "type": "insert",
            "newNumber": 208
          },
          {
            "content": "+      ctx.moveTo(hull[3].x, hull[3].y)",
            "type": "insert",
            "newNumber": 209
          },
          {
            "content": "+      ctx.lineTo(hull[4].x, hull[4].y)",
            "type": "insert",
            "newNumber": 210
          },
          {
            "content": "+    }",
            "type": "insert",
            "newNumber": 211
          },
          {
            "content": "+    else {",
            "type": "insert",
            "newNumber": 212
          },
          {
            "content": "+      ctx.moveTo(hull[0].x, hull[0].y)",
            "type": "insert",
            "newNumber": 213
          },
          {
            "content": "+      ctx.lineTo(hull[1].x, hull[1].y)",
            "type": "insert",
            "newNumber": 214
          },
          {
            "content": "+      ctx.lineTo(hull[2].x, hull[2].y)",
            "type": "insert",
            "newNumber": 215
          },
          {
            "content": "+      ctx.lineTo(hull[3].x, hull[3].y)",
            "type": "insert",
            "newNumber": 216
          },
          {
            "content": "+      ctx.moveTo(hull[4].x, hull[4].y)",
            "type": "insert",
            "newNumber": 217
          },
          {
            "content": "+      ctx.lineTo(hull[5].x, hull[5].y)",
            "type": "insert",
            "newNumber": 218
          },
          {
            "content": "+      ctx.lineTo(hull[6].x, hull[6].y)",
            "type": "insert",
            "newNumber": 219
          },
          {
            "content": "+      ctx.moveTo(hull[7].x, hull[7].y)",
            "type": "insert",
            "newNumber": 220
          },
          {
            "content": "+      ctx.lineTo(hull[8].x, hull[8].y)",
            "type": "insert",
            "newNumber": 221
          },
          {
            "content": "+    }",
            "type": "insert",
            "newNumber": 222
          },
          {
            "content": "+    ctx.stroke()",
            "type": "insert",
            "newNumber": 223
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 224
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 225
          },
          {
            "content": "+  drawShape(shape: Shape, offset?: Coordinate) {",
            "type": "insert",
            "newNumber": 226
          },
          {
            "content": "+    const ctx = this.ctx",
            "type": "insert",
            "newNumber": 227
          },
          {
            "content": "+    if (!ctx) return",
            "type": "insert",
            "newNumber": 228
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 229
          },
          {
            "content": "+    offset = offset || { x: 0, y: 0 }",
            "type": "insert",
            "newNumber": 230
          },
          {
            "content": "+    const order = shape.forward.points.length - 1",
            "type": "insert",
            "newNumber": 231
          },
          {
            "content": "+    const scl = shape.startcap.points.length",
            "type": "insert",
            "newNumber": 232
          },
          {
            "content": "+    const ecl = shape.endcap.points.length",
            "type": "insert",
            "newNumber": 233
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 234
          },
          {
            "content": "+    ctx.beginPath()",
            "type": "insert",
            "newNumber": 235
          },
          {
            "content": "+    ctx.moveTo(",
            "type": "insert",
            "newNumber": 236
          },
          {
            "content": "+      offset.x + shape.startcap.points[0].x,",
            "type": "insert",
            "newNumber": 237
          },
          {
            "content": "+      offset.y + shape.startcap.points[0].y,",
            "type": "insert",
            "newNumber": 238
          },
          {
            "content": "+    )",
            "type": "insert",
            "newNumber": 239
          },
          {
            "content": "+    ctx.lineTo(",
            "type": "insert",
            "newNumber": 240
          },
          {
            "content": "+      offset.x + shape.startcap.points[scl - 1].x,",
            "type": "insert",
            "newNumber": 241
          },
          {
            "content": "+      offset.y + shape.startcap.points[scl - 1].y,",
            "type": "insert",
            "newNumber": 242
          },
          {
            "content": "+    )",
            "type": "insert",
            "newNumber": 243
          },
          {
            "content": "+    if (order === 3) {",
            "type": "insert",
            "newNumber": 244
          },
          {
            "content": "+      ctx.bezierCurveTo(",
            "type": "insert",
            "newNumber": 245
          },
          {
            "content": "+        offset.x + shape.forward.points[1].x,",
            "type": "insert",
            "newNumber": 246
          },
          {
            "content": "+        offset.y + shape.forward.points[1].y,",
            "type": "insert",
            "newNumber": 247
          },
          {
            "content": "+        offset.x + shape.forward.points[2].x,",
            "type": "insert",
            "newNumber": 248
          },
          {
            "content": "+        offset.y + shape.forward.points[2].y,",
            "type": "insert",
            "newNumber": 249
          },
          {
            "content": "+        offset.x + shape.forward.points[3].x,",
            "type": "insert",
            "newNumber": 250
          },
          {
            "content": "+        offset.y + shape.forward.points[3].y,",
            "type": "insert",
            "newNumber": 251
          },
          {
            "content": "+      )",
            "type": "insert",
            "newNumber": 252
          },
          {
            "content": "+    }",
            "type": "insert",
            "newNumber": 253
          },
          {
            "content": "+    else {",
            "type": "insert",
            "newNumber": 254
          },
          {
            "content": "+      ctx.quadraticCurveTo(",
            "type": "insert",
            "newNumber": 255
          },
          {
            "content": "+        offset.x + shape.forward.points[1].x,",
            "type": "insert",
            "newNumber": 256
          },
          {
            "content": "+        offset.y + shape.forward.points[1].y,",
            "type": "insert",
            "newNumber": 257
          },
          {
            "content": "+        offset.x + shape.forward.points[2].x,",
            "type": "insert",
            "newNumber": 258
          },
          {
            "content": "+        offset.y + shape.forward.points[2].y,",
            "type": "insert",
            "newNumber": 259
          },
          {
            "content": "+      )",
            "type": "insert",
            "newNumber": 260
          },
          {
            "content": "+    }",
            "type": "insert",
            "newNumber": 261
          },
          {
            "content": "+    ctx.lineTo(",
            "type": "insert",
            "newNumber": 262
          },
          {
            "content": "+      offset.x + shape.endcap.points[ecl - 1].x,",
            "type": "insert",
            "newNumber": 263
          },
          {
            "content": "+      offset.y + shape.endcap.points[ecl - 1].y,",
            "type": "insert",
            "newNumber": 264
          },
          {
            "content": "+    )",
            "type": "insert",
            "newNumber": 265
          },
          {
            "content": "+    if (order === 3) {",
            "type": "insert",
            "newNumber": 266
          },
          {
            "content": "+      ctx.bezierCurveTo(",
            "type": "insert",
            "newNumber": 267
          },
          {
            "content": "+        offset.x + shape.back.points[1].x,",
            "type": "insert",
            "newNumber": 268
          },
          {
            "content": "+        offset.y + shape.back.points[1].y,",
            "type": "insert",
            "newNumber": 269
          },
          {
            "content": "+        offset.x + shape.back.points[2].x,",
            "type": "insert",
            "newNumber": 270
          },
          {
            "content": "+        offset.y + shape.back.points[2].y,",
            "type": "insert",
            "newNumber": 271
          },
          {
            "content": "+        offset.x + shape.back.points[3].x,",
            "type": "insert",
            "newNumber": 272
          },
          {
            "content": "+        offset.y + shape.back.points[3].y,",
            "type": "insert",
            "newNumber": 273
          },
          {
            "content": "+      )",
            "type": "insert",
            "newNumber": 274
          },
          {
            "content": "+    }",
            "type": "insert",
            "newNumber": 275
          },
          {
            "content": "+    else {",
            "type": "insert",
            "newNumber": 276
          },
          {
            "content": "+      ctx.quadraticCurveTo(",
            "type": "insert",
            "newNumber": 277
          },
          {
            "content": "+        offset.x + shape.back.points[1].x,",
            "type": "insert",
            "newNumber": 278
          },
          {
            "content": "+        offset.y + shape.back.points[1].y,",
            "type": "insert",
            "newNumber": 279
          },
          {
            "content": "+        offset.x + shape.back.points[2].x,",
            "type": "insert",
            "newNumber": 280
          },
          {
            "content": "+        offset.y + shape.back.points[2].y,",
            "type": "insert",
            "newNumber": 281
          },
          {
            "content": "+      )",
            "type": "insert",
            "newNumber": 282
          },
          {
            "content": "+    }",
            "type": "insert",
            "newNumber": 283
          },
          {
            "content": "+    ctx.closePath()",
            "type": "insert",
            "newNumber": 284
          },
          {
            "content": "+    ctx.fill()",
            "type": "insert",
            "newNumber": 285
          },
          {
            "content": "+    ctx.stroke()",
            "type": "insert",
            "newNumber": 286
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 287
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 288
          },
          {
            "content": "+  drawText(text: string, offset: Coordinate) {",
            "type": "insert",
            "newNumber": 289
          },
          {
            "content": "+    if (!this.ctx) return",
            "type": "insert",
            "newNumber": 290
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 291
          },
          {
            "content": "+    offset = offset || { x: 0, y: 0 }",
            "type": "insert",
            "newNumber": 292
          },
          {
            "content": "+    this.ctx.fillText(text, offset.x, offset.y)",
            "type": "insert",
            "newNumber": 293
          },
          {
            "content": "+  }",
            "type": "insert",
            "newNumber": 294
          },
          {
            "content": "+}",
            "type": "insert",
            "newNumber": 295
          }
        ],
        "oldStartLine": 0,
        "oldStartLine2": null,
        "newStartLine": 1,
        "header": "@@ -0,0 +1,295 @@"
      }
    ],
    "deletedLines": 0,
    "addedLines": 295,
    "isGitDiff": true,
    "newFileMode": "100644",
    "isNew": true,
    "checksumBefore": "0000000",
    "checksumAfter": "8432795",
    "oldName": "/dev/null",
    "language": "ts",
    "newName": "src/pages/konva-page/utils/curve-drawer.ts",
    "isCombined": false
  },
  {
    "blocks": [
      {
        "lines": [
          {
            "content": " import { Welcome } from '../pages/welcome'",
            "type": "context",
            "oldNumber": 11,
            "newNumber": 11
          },
          {
            "content": " import { RequireAuth } from '../pages/auth/components/require-auth'",
            "type": "context",
            "oldNumber": 12,
            "newNumber": 12
          },
          {
            "content": " import { NoMatch } from '../pages/no-match'",
            "type": "context",
            "oldNumber": 13,
            "newNumber": 13
          },
          {
            "content": "+import { KonvaPage } from '../pages/konva-page'",
            "type": "insert",
            "newNumber": 14
          },
          {
            "content": "+import { RouterKey } from './models/enums'",
            "type": "insert",
            "newNumber": 15
          },
          {
            "content": " ",
            "type": "context",
            "oldNumber": 14,
            "newNumber": 16
          },
          {
            "content": " const router = createBrowserRouter([",
            "type": "context",
            "oldNumber": 15,
            "newNumber": 17
          },
          {
            "content": "   {",
            "type": "context",
            "oldNumber": 16,
            "newNumber": 18
          },
          {
            "content": "     element: <Layout />,",
            "type": "context",
            "oldNumber": 17,
            "newNumber": 19
          },
          {
            "content": "     children: [",
            "type": "context",
            "oldNumber": 18,
            "newNumber": 20
          },
          {
            "content": "       {",
            "type": "context",
            "oldNumber": 19,
            "newNumber": 21
          },
          {
            "content": "-        path: '/',",
            "type": "delete",
            "oldNumber": 20
          },
          {
            "content": "+        path: RouterKey.Home,",
            "type": "insert",
            "newNumber": 22
          },
          {
            "content": "         element: <Welcome />,",
            "type": "context",
            "oldNumber": 21,
            "newNumber": 23
          },
          {
            "content": "       },",
            "type": "context",
            "oldNumber": 22,
            "newNumber": 24
          },
          {
            "content": "       {",
            "type": "context",
            "oldNumber": 23,
            "newNumber": 25
          },
          {
            "content": "-        path: '/login',",
            "type": "delete",
            "oldNumber": 24
          },
          {
            "content": "+        path: RouterKey.Login,",
            "type": "insert",
            "newNumber": 26
          },
          {
            "content": "         element: <Login />,",
            "type": "context",
            "oldNumber": 25,
            "newNumber": 27
          },
          {
            "content": "       },",
            "type": "context",
            "oldNumber": 26,
            "newNumber": 28
          },
          {
            "content": "       {",
            "type": "context",
            "oldNumber": 27,
            "newNumber": 29
          },
          {
            "content": "-        path: '/react-table-page',",
            "type": "delete",
            "oldNumber": 28
          },
          {
            "content": "+        path: RouterKey.ReactTablePage,",
            "type": "insert",
            "newNumber": 30
          },
          {
            "content": "         element: (",
            "type": "context",
            "oldNumber": 29,
            "newNumber": 31
          },
          {
            "content": "           <RequireAuth>",
            "type": "context",
            "oldNumber": 30,
            "newNumber": 32
          },
          {
            "content": "             <ReactTablePage />",
            "type": "context",
            "oldNumber": 31,
            "newNumber": 33
          },
          {
            "content": "           </RequireAuth>",
            "type": "context",
            "oldNumber": 32,
            "newNumber": 34
          },
          {
            "content": "         ),",
            "type": "context",
            "oldNumber": 33,
            "newNumber": 35
          },
          {
            "content": "       },",
            "type": "context",
            "oldNumber": 34,
            "newNumber": 36
          },
          {
            "content": "+      {",
            "type": "insert",
            "newNumber": 37
          },
          {
            "content": "+",
            "type": "insert",
            "newNumber": 38
          },
          {
            "content": "+        path: RouterKey.KonvaPage,",
            "type": "insert",
            "newNumber": 39
          },
          {
            "content": "+        element: (",
            "type": "insert",
            "newNumber": 40
          },
          {
            "content": "+          <RequireAuth>",
            "type": "insert",
            "newNumber": 41
          },
          {
            "content": "+            <KonvaPage />",
            "type": "insert",
            "newNumber": 42
          },
          {
            "content": "+          </RequireAuth>",
            "type": "insert",
            "newNumber": 43
          },
          {
            "content": "+        ),",
            "type": "insert",
            "newNumber": 44
          },
          {
            "content": "+      },",
            "type": "insert",
            "newNumber": 45
          },
          {
            "content": "       {",
            "type": "context",
            "oldNumber": 35,
            "newNumber": 46
          },
          {
            "content": "         path: '*',",
            "type": "context",
            "oldNumber": 36,
            "newNumber": 47
          },
          {
            "content": "         element: <NoMatch />,",
            "type": "context",
            "oldNumber": 37,
            "newNumber": 48
          }
        ],
        "oldStartLine": 11,
        "oldStartLine2": null,
        "newStartLine": 11,
        "header": "@@ -11,27 +11,38 @@ import { Layout } from '../pages/layout'"
      }
    ],
    "deletedLines": 3,
    "addedLines": 14,
    "isGitDiff": true,
    "checksumBefore": "753b043",
    "checksumAfter": "28680ba",
    "mode": "100644",
    "oldName": "src/router/index.tsx",
    "language": "tsx",
    "newName": "src/router/index.tsx",
    "isCombined": false
  },
  {
    "blocks": [
      {
        "lines": [
          {
            "content": "   Login = '/login',",
            "type": "context",
            "oldNumber": 10,
            "newNumber": 10
          },
          {
            "content": "   /** React Table */",
            "type": "context",
            "oldNumber": 11,
            "newNumber": 11
          },
          {
            "content": "   ReactTablePage = '/react-table-page',",
            "type": "context",
            "oldNumber": 12,
            "newNumber": 12
          },
          {
            "content": "+  /** 图形绘制页 */",
            "type": "insert",
            "newNumber": 13
          },
          {
            "content": "+  KonvaPage = '/konva-page',",
            "type": "insert",
            "newNumber": 14
          },
          {
            "content": " }",
            "type": "context",
            "oldNumber": 13,
            "newNumber": 15
          }
        ],
        "oldStartLine": 10,
        "oldStartLine2": null,
        "newStartLine": 10,
        "header": "@@ -10,4 +10,6 @@ export const enum RouterKey {"
      }
    ],
    "deletedLines": 0,
    "addedLines": 2,
    "isGitDiff": true,
    "checksumBefore": "90fbe83",
    "checksumAfter": "e968fe2",
    "mode": "100644",
    "oldName": "src/router/models/enums.ts",
    "language": "ts",
    "newName": "src/router/models/enums.ts",
    "isCombined": false
  }
]
